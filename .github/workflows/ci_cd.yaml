name: CI-CD

on: push

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' 


      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

          
      - name: Install Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Configure MLflow + DagsHub
        run: |
          echo "MLFLOW_TRACKING_URI=https://dagshub.com/${{ secrets.DAGSHUB_USERNAME }}/${{secrets.DAGSHUB_REPO}}.mlflow" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_USERNAME=${{ secrets.DAGSHUB_USERNAME }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.DAGSHUB_PAT }}" >> $GITHUB_ENV
          echo "MLFLOW_REPO_NAME=${{ secrets.DAGSHUB_REPO }}" >> $GITHUB_ENV


      - name: DVC Pull
        run: |
          dvc pull

      - name: DVC PIPELINE
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        run: |
          dvc repro

      - name: Test Model Registry
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        run: |
          pytest tests/model_registry.py

      - name: Test Model Performance
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        run: |
          pytest tests/model_performance.py

      - name: Promote Model
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        if: success()
        run: |
          python Scripts/promote_model_to_prod.py

     
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

  
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


      - name: Deploy to EC2
        if: success()
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ap-southeast-2
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_URI }}:latest
            docker pull $IMAGE_URI
            docker stop my-app || true
            docker rm my-app || true
            docker run -d -p 80:8000 \
            -e DAGSHUB_PAT=${{ secrets.DAGSHUB_PAT }} \
            -e DAGSHUB_USERNAME=${{ secrets.DAGSHUB_USERNAME }} \
            -e DAGSHUB_REPO=${{ secrets.DAGSHUB_REPO }} \
            --name swiggy-${{ github.run_number }} \
            $IMAGE_URI
            